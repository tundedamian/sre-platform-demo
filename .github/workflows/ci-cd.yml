name: CI/CD Pipeline - Code to Production

# This workflow automates the entire process from code commit to running on production application servers
# It demonstrates how code moves from development into production through an automated pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Continuous Integration - Code Validation
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'application/package-lock.json'

    - name: Install dependencies
      run: |
        cd application
        npm ci

    - name: Run linting
      run: |
        cd application
        npm run lint

    - name: Run tests
      run: |
        cd application
        npm test

    - name: Run security audit
      run: |
        cd application
        npm audit --audit-level moderate

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    name: Build and Push Container Image
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./application
        file: ./application/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
      # This creates a container image with the application code that will run on application servers

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Staging Environment
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
      # This step configures kubectl with credentials to connect to the staging Kubernetes cluster

    - name: Deploy to staging
      run: |
        kubectl set image deployment/sre-platform-app -n staging app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        kubectl rollout status deployment/sre-platform-app -n staging
        kubectl get pods -n staging
      # This step deploys the newly built container image to application servers in the staging environment
      # The kubectl command connects to the Kubernetes cluster hosting the application servers
      # and updates the deployment with the new image, initiating a rolling update

  deploy-production:
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    name: Deploy to Production Environment
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
      # This step configures kubectl with credentials to connect to the production Kubernetes cluster

    - name: Deploy to production
      run: |
        kubectl set image deployment/sre-platform-app -n production app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        kubectl rollout status deployment/sre-platform-app -n production
        kubectl get pods -n production
      # This step deploys the validated container image to production application servers
      # This is the final step in the CI/CD pipeline where code moves to production application servers
      # The deployment includes health checks to ensure proper operation

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'repo'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    needs: [test, build-and-push, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    name: Notification
    if: always()
    steps:
    - name: Notify on success
      if: ${{ success() }}
      run: |
        echo "Pipeline completed successfully - code has been deployed to application servers"
        
    - name: Notify on failure
      if: ${{ failure() }}
      run: |
        echo "Pipeline failed, check logs - code was not deployed to application servers"
        # Add notification to Slack/Teams/Mail etc.