---
# PostgreSQL StatefulSet with replication for production-grade database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-db
  namespace: production
  labels:
    app: postgres-db
spec:
  serviceName: postgres-db
  replicas: 3  # Production-grade: multiple replicas for high availability
  selector:
    matchLabels:
      app: postgres-db
  template:
    metadata:
      labels:
        app: postgres-db
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "sre_platform_db"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 60
          timeoutSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 999
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
# PostgreSQL Service for internal cluster communication
apiVersion: v1
kind: Service
metadata:
  name: postgres-db
  namespace: production
  labels:
    app: postgres-db
spec:
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None  # Use Headless Service for StatefulSet
  selector:
    app: postgres-db
---
# Redis Cluster for caching with replication
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: production
  labels:
    app: redis
spec:
  serviceName: redis-cluster
  replicas: 3  # Production-grade: multiple replicas for high availability
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - "redis-server"
        - "/etc/redis/redis.conf"
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: redis-data
          mountPath: /data
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 15
          timeoutSeconds: 3
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 999
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 5Gi
---
# Redis Service for internal cluster communication
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: production
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None  # Use Headless Service for StatefulSet
  selector:
    app: redis
---
# Redis ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: production
  labels:
    app: redis
data:
  redis.conf: |
    maxmemory 256mb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    appendonly yes
---
# PostgreSQL credentials secret (example - in production, use external secret management)
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: production
  labels:
    app: postgres-db
type: Opaque
data:
  username: cG9zdGdyZXM=  # base64 encoded 'postgres'
  password: cGFzc3dvcmQxMjM=  # base64 encoded 'password123'
---
# Update the main application deployment to connect to the database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sre-platform-app
  namespace: production
  labels:
    app: sre-platform-app
    version: v1
spec:
  replicas: 3  # Production-grade: multiple replicas for high availability
  selector:
    matchLabels:
      app: sre-platform-app
  template:
    metadata:
      labels:
        app: sre-platform-app
        version: v1
    spec:
      serviceAccountName: sre-platform-app-sa
      containers:
      - name: app
        image: ghcr.io/your-org/sre-platform-demo:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: PORT
          value: "3000"
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          value: "postgresql://postgres:password123@postgres-db-0.postgres-db.production.svc.cluster.local:5432/sre_platform_db"
        - name: REDIS_URL
          value: "redis://redis-cluster-0.redis-cluster.production.svc.cluster.local:6379"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
---
# Update the main service to maintain consistency
apiVersion: v1
kind: Service
metadata:
  name: sre-platform-app-service
  namespace: production
  labels:
    app: sre-platform-app
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: sre-platform-app
  ports:
    - name: http
      port: 80
      targetPort: 3000
      protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sre-platform-app-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: sre-platform.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sre-platform-app-service
            port:
              number: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sre-platform-app-sa
  namespace: production
  labels:
    app: sre-platform-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: production
  labels:
    app: sre-platform-app
data:
  LOG_LEVEL: "info"
  PORT: "3000"
  NODE_ENV: "production"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sre-platform-app-hpa
  namespace: production
  labels:
    app: sre-platform-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sre-platform-app
  minReplicas: 3  # Production-grade: minimum 3 replicas for high availability
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sre-platform-app-pdb
  namespace: production
  labels:
    app: sre-platform-app
spec:
  minAvailable: 2  # Production-grade: ensure at least 2 pods are available during disruptions
  selector:
    matchLabels:
      app: sre-platform-app